/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.RecipeReadDto
import org.openapitools.client.models.RecipeWriteDto

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class DefaultApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create recipes.
     * Create recipes.
     * @param recipeWriteDto Recipes in JSON array format.
     * @return kotlin.collections.List<RecipeReadDto>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createRecipes(recipeWriteDto: kotlin.collections.List<RecipeWriteDto>): HttpResponse<kotlin.collections.List<RecipeReadDto>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = CreateRecipesRequest(recipeWriteDto)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/recipes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<CreateRecipesResponse>().map { value }
    }

    @Serializable(CreateRecipesRequest.Companion::class)
    private class CreateRecipesRequest(val value: List<RecipeWriteDto>) {
        companion object : KSerializer<CreateRecipesRequest> {
            private val serializer: KSerializer<List<RecipeWriteDto>> = serializer<List<RecipeWriteDto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: CreateRecipesRequest) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = CreateRecipesRequest(serializer.deserialize(decoder))
        }
    }
    @Serializable(CreateRecipesResponse.Companion::class)
    private class CreateRecipesResponse(val value: List<RecipeReadDto>) {
        companion object : KSerializer<CreateRecipesResponse> {
            private val serializer: KSerializer<List<RecipeReadDto>> = serializer<List<RecipeReadDto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: CreateRecipesResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = CreateRecipesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Delete a specific recipe by id.
     * Delete a specific recipe by id.
     * @param id The Id of the recipe
     * @return RecipeReadDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteRecipeById(id: kotlin.String): HttpResponse<RecipeReadDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/recipes/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Return the actual menu
     * Return the actual menu
     * @param random Get a random menu or the actual menu (optional, default to false)
     * @return kotlin.collections.List<RecipeReadDto>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getActualMenu(random: kotlin.Boolean? = false): HttpResponse<kotlin.collections.List<RecipeReadDto>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        random?.apply { localVariableQuery["random"] = listOf("$random") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/recipes/menu",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetActualMenuResponse>().map { value }
    }

    @Serializable(GetActualMenuResponse.Companion::class)
    private class GetActualMenuResponse(val value: List<RecipeReadDto>) {
        companion object : KSerializer<GetActualMenuResponse> {
            private val serializer: KSerializer<List<RecipeReadDto>> = serializer<List<RecipeReadDto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetActualMenuResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetActualMenuResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Return all recipes.
     * Return all recipes.
     * @return kotlin.collections.List<RecipeReadDto>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAllRecipes(): HttpResponse<kotlin.collections.List<RecipeReadDto>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/recipes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetAllRecipesResponse>().map { value }
    }

    @Serializable(GetAllRecipesResponse.Companion::class)
    private class GetAllRecipesResponse(val value: List<RecipeReadDto>) {
        companion object : KSerializer<GetAllRecipesResponse> {
            private val serializer: KSerializer<List<RecipeReadDto>> = serializer<List<RecipeReadDto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetAllRecipesResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetAllRecipesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Return a specific recipe by id.
     * Return a specific recipe by id.
     * @param id The Id of the recipe
     * @return RecipeReadDto
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getRecipeById(id: kotlin.String): HttpResponse<RecipeReadDto> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/recipes/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update the actual menu
     * Update the actual menu
     * @param recipeReadDto Recipes for the new menu
     * @return kotlin.collections.List<RecipeReadDto>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateMenu(recipeReadDto: kotlin.collections.List<RecipeReadDto>): HttpResponse<kotlin.collections.List<RecipeReadDto>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = UpdateMenuRequest(recipeReadDto)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/recipes/menu",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<UpdateMenuResponse>().map { value }
    }

    @Serializable(UpdateMenuRequest.Companion::class)
    private class UpdateMenuRequest(val value: List<RecipeReadDto>) {
        companion object : KSerializer<UpdateMenuRequest> {
            private val serializer: KSerializer<List<RecipeReadDto>> = serializer<List<RecipeReadDto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: UpdateMenuRequest) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = UpdateMenuRequest(serializer.deserialize(decoder))
        }
    }
    @Serializable(UpdateMenuResponse.Companion::class)
    private class UpdateMenuResponse(val value: List<RecipeReadDto>) {
        companion object : KSerializer<UpdateMenuResponse> {
            private val serializer: KSerializer<List<RecipeReadDto>> = serializer<List<RecipeReadDto>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: UpdateMenuResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = UpdateMenuResponse(serializer.deserialize(decoder))
        }
    }

}
